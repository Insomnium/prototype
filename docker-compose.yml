services:
  postgres:
    container_name: postgres-prototype
    image: postgres:17.4-alpine3.21
    profiles:
      - all
      - db
      - keycloak
      - core
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${PWD}/etc/docker/postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: ${CORE_PG_USER}
      POSTGRES_USER: ${CORE_PG_PASSWORD}
      POSTGRES_PASSWORD: ${CORE_PG_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: ${CORE_PG_AUTH_METHOD}

  elasticsearch:
    image: elasticsearch:8.17.3
    container_name: elasticsearch
    profiles:
      - all
      - index
      - core
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - http.cors.allow-origin=http://localhost:8085,http://paganblacker.internal:8085
      - http.cors.enabled=true
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elastic

  kibana:
    image: kibana:8.17.3
    container_name: kibana
    profiles:
      - all
      - index
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - elastic
    depends_on:
      - elasticsearch

  elasticvue:
    image: cars10/elasticvue
    container_name: elasticvue
    profiles:
      - all
      - index
    volumes:
      - "${PWD}/etc/docker/elasticvue_conf.json:/usr/share/nginx/html/api/default_clusters.json"
    ports:
      - "8085:8080"
    networks:
      - elastic

  broker:
    image: confluentinc/cp-server:7.9.0
    hostname: broker
    container_name: broker
    profiles:
      - all
      - kafka
      - core
      - broker
    ports:
      - "9092:9092"
      - "9101:9101"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PAGANBLACKER_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092,PAGANBLACKER_HOST://paganblacker.internal:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092,PAGANBLACKER_HOST://0.0.0.0:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    hostname: schema-registry
    container_name: schema-registry
    profiles:
      - all
      - kafka
      - core
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://schema-registry:8081" ]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry-init:
    image: curlimages/curl
    container_name: schema_registry_init
    profiles:
      - all
      - kafka
      - core
    depends_on:
      schema-registry:
        condition: service_healthy
    volumes:
      - ${PWD}/etc/docker/kafka/schema:/schema
    entrypoint: /bin/sh -c "/schema/register_schema.sh"

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.4-7.6.0
    hostname: connect
    container_name: connect
    profiles:
      - all
      - kafka
      - core
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.9.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.0
    hostname: control-center
    container_name: control-center
    profiles:
      - all
      - kafka
      - core
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      #      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    container_name: keycloak
    command: start-dev --import-realm
    ports:
      - 9090:8080
    depends_on:
      - postgres
    profiles:
      - all
      - keycloak
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: password
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${KC_PG_USER}
      KC_DB_PASSWORD: ${KC_PG_PASSWORD}
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
#      KEYCLOAK_ADMIN: admin
#      KEYCLOAK_ADMIN_PASSWORD: password
    volumes:
      - ${PWD}/etc/docker/keycloak/init-sample.json:/opt/keycloak/data/import/realm-export.json

  weblist: # TODO: change to MinIO
    image: ghcr.io/umputun/weblist:latest
    container_name: weblist
    profiles:
      - all
      - cdn
    ports:
      - "9000:8080"
    volumes:
      - weblist:/data:rw
    environment:
#      - LISTEN=:8080
      - THEME=light
      - ROOT_DIR=/data
      - EXCLUDE=.git,.env
#      - AUTH=your_password  # Optional: Enable password authentication
#      - AUTH_USER=admin  # Optional: Custom username for authentication (default: weblist)
#      - SESSION_SECRET=your_secure_key  # Optional: Secret for signing session tokens
#      - SESSION_TTL=24h  # Optional: Session timeout duration
      - BRAND_NAME=Admin Console  # Optional: Display company name in navbar
#      - BRAND_COLOR=#3498db  # Optional: Custom color for navbar
#      - CUSTOM_FOOTER="<a href='https://example.com'>Example</a> | Â© 2025"  # Optional: Custom footer text
#      - SFTP_ENABLED=true   # Optional: Enable SFTP server
#      - SFTP_USER=sftp_user # Optional: Username for SFTP access
#      - SFTP_ADDRESS=:2022  # Optional: SFTP port
#      - SFTP_KEY=/data/ssh_key  # Optional: Path to SSH host key
#      - SFTP_AUTHORIZED=/data/authorized_keys  # Optional: Path to authorized_keys file for public key auth
#      - SYNTAX_HIGHLIGHT=true  # Optional: Enable syntax highlighting for code files
#      - MULTI_SELECT=true  # Optional: Enable multi-file selection and download

  cassandra-1:
    image: "cassandra:5.0.5"  # cassandra:4.1.3
    container_name: "cassandra-1"
    profiles:
      - all
      - cassandra
    ports:
      - 7000:7000
      - 9042:9042
    networks:
      - cassandra-net
    mem_limit: 1g
    environment:
      - CASSANDRA_START_RPC=true       # default
      - CASSANDRA_RPC_ADDRESS=0.0.0.0  # default
      - CASSANDRA_LISTEN_ADDRESS=auto  # default, use IP addr of container # = CASSANDRA_BROADCAST_ADDRESS
      - CASSANDRA_CLUSTER_NAME=my-cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=prototype-dc1
      - MAX_HEAP_SIZE=768M
    volumes:
      - cassandra-node-01:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status" ]
      interval: 2m
      start_period: 2m
      timeout: 10s
      retries: 3

  cassandra-2:
    image: "cassandra:5.0.5"  # cassandra:4.1.3
    container_name: "cassandra-2"
    profiles:
      - all
      - cassandra
    ports:
      - 9043:9042    
    networks:
      - cassandra-net
    mem_limit: 1g
    environment:
      - CASSANDRA_START_RPC=true       # default
      - CASSANDRA_RPC_ADDRESS=0.0.0.0  # default
      - CASSANDRA_LISTEN_ADDRESS=auto  # default, use IP addr of container # = CASSANDRA_BROADCAST_ADDRESS
      - CASSANDRA_CLUSTER_NAME=my-cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=prototype-dc1
      - CASSANDRA_SEEDS=cassandra-1
      - MAX_HEAP_SIZE=768M
    depends_on:
      cassandra-1:
        condition: service_healthy
    volumes:
      - cassandra-node-02:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status" ]
      interval: 2m
      start_period: 2m
      timeout: 10s
      retries: 3

  cassandra-3:
    image: "cassandra:5.0.5"  # cassandra:4.1.3
    container_name: "cassandra-3"
    profiles:
      - all
      - cassandra
    ports:
      - 9044:9042
    networks:
      - cassandra-net
    mem_limit: 1g
    environment:
      - CASSANDRA_START_RPC=true       # default
      - CASSANDRA_RPC_ADDRESS=0.0.0.0  # default
      - CASSANDRA_LISTEN_ADDRESS=auto  # default, use IP addr of container # = CASSANDRA_BROADCAST_ADDRESS
      - CASSANDRA_CLUSTER_NAME=my-cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=prototype-dc1
      - CASSANDRA_SEEDS=cassandra-1
      - MAX_HEAP_SIZE=768M
    depends_on:
      cassandra-2:
        condition: service_healthy
    volumes:
      - cassandra-node-03:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status" ]
      interval: 2m
      start_period: 2m
      timeout: 10s
      retries: 3


volumes:
  elastic_data:
    driver: local
  postgres_data:
    driver: local
  weblist:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./photo
  cassandra-node-01:
  cassandra-node-02:
  cassandra-node-03:

networks:
  elastic:
    driver: bridge
  cassandra-net:
    driver: bridge

